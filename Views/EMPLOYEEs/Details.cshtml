@model HRM.Models.EmployeeViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .p {
        font-family: IBM Plex Sans;
        font-style: normal;
        font-weight: normal;
        font-size: 16px;
        line-height: 150%;
        /* or 24px */
        letter-spacing: 0.01em;
        color: #535353;
        /* identical to box height, or 22px */
        background: none;
    }
    /* Style the buttons that are used to open the tab content */
    .tab button {
        width: 240px;
        height: 48.05px;
        background: #FFFFFF;
        border: 1px solid #C1C1C1;
    }

        /* Change background color of buttons on hover */
        .tab button:hover {
            background-color: #ddd;
        }

        /* Create an active/current tablink class */
        .tab button.active {
            background: linear-gradient(180deg, #0099E9 0%, #80C8ED 100%);
            border-radius: 4px 4px 0px 0px;
        }
    /* Style the tab content */
    .tabcontent {
        display: none;
        padding: 6px 12px;
    }

    .break {
        color: #3D76B5;
    }

    .hr {
        height: 1px;
        color: #4282BB;
        margin-left: 10px;
        margin-right: 10px;
        background-color: #4282BB;
        border: 1px solid #4282BB;
    }
</style>
<div>
    <!-- Tab links -->
    <div class="tab">
        <button class="tablinks" onclick="tab(event, 'BasicInfo')" id="defaultOpen">Thông tin cơ bản</button>
        <button class="tablinks" onclick="tab(event, 'Education')">Trình độ chuyên môn</button>
        <button class="tablinks" onclick="tab(event, 'Certificate')">Chứng chỉ chuyên ngành</button>
        <button class="tablinks" onclick="tab(event, 'Contract')">Hợp đồng</button>
    </div>

    <!-- Tab content -->
    <div id="BasicInfo" class="tabcontent">
        <p>
            @Html.Label("Mã nhân viên:")
            @Html.DisplayFor(model => model.EmployeeID)
        </p>
        <p>
            @Html.Label("Tên nhân viên:")
            @Html.DisplayFor(model => model.EmployeeName)
        </p>
        <p>
            @Html.Label("Ảnh nhân viên:")
            @Html.DisplayFor(model => model.Image)
        </p>
        <p>
            @Html.Label("Phòng:")
            @Html.DisplayFor(model => model.RoomName)
        </p>
        <p>
            @Html.Label("Chức vụ:")
            @Html.DisplayFor(model => model.PositionName)
        </p>
        <p>
            @Html.Label("Ngày sinh:")
            @Html.DisplayFor(model => model.DoB)
        </p>
        <p>
            @Html.Label("Giới tính:")
            @Html.DisplayFor(model => model.Sex)
        </p>
        <p>
            @Html.Label("Số CMND / CCCD:")
            @Html.DisplayFor(model => model.IdNumber)
        </p>
        <p>
            @Html.Label(" Nơi sinh:")
            @Html.DisplayFor(model => model.Birthplace)
        </p>
        <p>
            @Html.Label("Dân tộc:")
            @Html.DisplayFor(model => model.Nation)
        </p>
        <break>
            Thông tin liên lạc
        </break>
        <hr />
        <p>
            @Html.Label("Số điện thoại:")
            @Html.DisplayFor(model => model.Phone)
        </p>
        <p>
            @Html.Label("Email:")
            @Html.DisplayFor(model => model.Email)
        </p>
        <p>
            @Html.Label("Địa chỉ:")
            @Html.DisplayFor(model => model.Street)
            @Html.DisplayFor(model => model.Dictrict)
            @Html.DisplayFor(model => model.Ward)
            @Html.DisplayFor(model => model.City)
        </p>
        <p>
            @Html.Label("Quê quán:")
            @Html.DisplayFor(model => model.HomeTown)
        </p>
        <break>
            Thông tin khác
        </break>
        <hr />
        <p>
            @Html.Label("Miễn BHYT:")
            @Html.DisplayFor(model => model.HealthInsurance)
        </p>
        <p>
            @Html.Label("Số BHYT:")
            @Html.DisplayFor(model => model.HealthInsuranceID)
        </p>
        <p>
            @Html.Label("Số BHXH:")
            @Html.DisplayFor(model => model.SocialInsuranceID)
        </p>
        <p>
            @Html.Label("Đăng ký giảm trừ bản thân:")
            @Html.DisplayFor(model => model.DeductionPersonal)
        </p>
        <p>
            @Html.Label("Đăng ký giảm trừ phụ thuộc:")
            @Html.DisplayFor(model => model.DeductionDependent)
        </p>
    </div>

    <div id="Education" class="tabcontent">
        <p>
            @Html.Label("Trình độ:")
            @Html.DisplayFor(model => model.EducationName)
        </p>
        <p>
            @Html.Label("Chuyên ngành:")
            @Html.DisplayFor(model => model.MajorName)
        </p>
        <p>
            @Html.Label("Ngày cấp:")
            @Html.DisplayFor(model => model.Date)
        </p>
        <p>
            @Html.Label("Nơi đào tạo:")
            @Html.DisplayFor(model => model.Place)
        </p>
    </div>

    <div id="Certificate" class="tabcontent">
        <p>
            @Html.Label("Chứng chỉ:")
            @Html.DisplayFor(model => model.CertificateName)
        </p>
        <p>
            @Html.Label("Loại chứng chỉ:")
            @Html.DisplayFor(model => model.TypeCertificate)
        </p>
        <p>
            @Html.Label("Ngày cấp:")
            @Html.DisplayFor(model => model.CertificateDate)
        </p>
        <p>
            @Html.Label("Nơi cấp:")
            @Html.DisplayFor(model => model.CertificatePlace)
        </p>
    </div>

    <div id="Contract" class="tabcontent">
        <p>
            @Html.Label("Số hợp đồng:")
            @Html.DisplayFor(model => model.ContractID)
        </p>
        <p>
            @Html.Label("Loại hợp đồng:")
            @Html.DisplayFor(model => model.ContractType)
        </p>
        <p>
            @Html.Label("Lương cơ bản:")
            @Html.DisplayFor(model => model.BasicSalary)
            VNĐ
        </p>
        <p>
            @Html.Label("Ngày vào làm:")
            @Html.DisplayFor(model => model.DateStartWork)
        </p>
        <p>
            @Html.Label("Ngày kết thúc:")
            @Html.DisplayFor(model => model.ContractExpirationDate)
        </p>
    </div>

</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.EmployeeID }) |
    @Html.ActionLink("Back to List", "Index")
</p>
<script>
    function tab(evt, action) {
        // Declare all variables
        var i, tabcontent, tablinks;

        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Get all elements with class="tablinks" and remove the class "active"
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }

        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(action).style.display = "block";
        evt.currentTarget.className += " active";
    }
    // Get the element with id="defaultOpen" and click on it
    document.getElementById("defaultOpen").click();
</script>
